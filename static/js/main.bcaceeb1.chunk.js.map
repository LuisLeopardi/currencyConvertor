{"version":3,"sources":["components/select.jsx","components/dateBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Select","onChange","this","props","change","name","value","currencies","map","key","Component","DateBox","state","position","bottom","handleClick","setState","handleSecondClick","id","style","onClick","date","href","App","base","convertTo","amount","result","Api","fetch","then","response","json","data","Object","keys","rates","handleSwap","handleResult","handleSelect","e","target","handleInput","isNaN","type","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOA4BeA,E,iLAvBX,OAEC,4BAAQC,SAAUC,KAAKC,MAAMC,OAAQC,KAAMH,KAAKC,MAAME,KAAMC,MAAOJ,KAAKC,MAAMG,OAE3EJ,KAAKC,MAAMI,WAAWC,KAAI,SAAAD,GAAU,OAEpC,4BAEEE,IAAMF,EAEND,MAASC,GAJX,IAMKA,W,GAfQG,aCiDNC,E,2MA/CfC,MAAQ,CAEPC,SAAU,CACTC,OAAQ,U,EAKVC,YAAc,WACb,EAAKC,SAAU,CAACH,SAAU,CAACC,OAAQ,U,EAGpCG,kBAAoB,WAClB,EAAKD,SAAU,CAACH,SAAU,CAACC,OAAQ,Y,wEAMpC,OAEC,yBAAKI,GAAG,OAAOC,MAAQjB,KAAKU,MAAMC,UAEjC,yBAAKK,GAAG,OAEPE,QAE+B,UAA/BlB,KAAKU,MAAMC,SAASC,OAEpBZ,KAAKa,YAELb,KAAKe,mBARN,mBAcC,sDAA4Bf,KAAKC,MAAMkB,KAAvC,KACA,uCAAY,uBAAGC,KAAK,+BAAR,iCAAZ,U,GAxCkBZ,aC8GPa,E,2MAzGbX,MAAQ,CAENL,WAAY,GAEZiB,KAAM,MAENC,UAAW,MAEXC,OAAQ,GAERC,OAAQ,GAERN,KAAM,GAENO,IAAK,WAEHC,MAAM,mDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKjB,SACH,CACCK,KAAMY,EAAKZ,KACXd,WAAY2B,OAAOC,KAAKF,EAAKG,c,EAOtCC,WAAa,WACX,EAAKrB,SAAS,CAAEQ,KAAM,EAAKZ,MAAMa,UAAWA,UAAW,EAAKb,MAAMY,MAC7D,EAAKc,e,EAIZC,aAAe,SAAAC,GACX,EAAKxB,SAAL,eACGwB,EAAEC,OAAOpC,KAAOmC,EAAEC,OAAOnC,OACzB,EAAKgC,e,EAIZI,YAAc,SAAAF,GACZ,EAAKxB,SAAS,CAACU,OAAOc,EAAEC,OAAOnC,OAC1B,EAAKgC,e,EAIZA,aAAe,SAAAE,GAEb,IAAId,EAAS,EAAKd,MAAMc,OAEpBA,IAAWiB,OAMbd,MAAM,+CAAD,OAAgD,EAAKjB,MAAMY,OAC/DM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJ,IAAMN,EAASM,EAAKG,MAAM,EAAKxB,MAAMa,WAAaC,EAClD,EAAKV,SAAS,CAACW,e,wEAKX,IAAD,EAEuDzB,KAAKU,MAA3DL,EAFD,EAECA,WAAYiB,EAFb,EAEaA,KAAME,EAFnB,EAEmBA,OAAQD,EAF3B,EAE2BA,UAAWE,EAFtC,EAEsCA,OAAQN,EAF9C,EAE8CA,KAGrD,OAFAnB,KAAKU,MAAMgB,MAIT,yBAAKV,GAAG,OAER,8BAEC,2BAAOjB,SAAYC,KAAKwC,YAAaE,KAAK,SAAStC,MAAOoB,IAE1D,kBAAC,EAAD,CAAQtB,OAAUF,KAAKqC,aAAclC,KAAK,OAAOC,MAAOkB,EAAMjB,WAAYA,IAE1E,4BAAQqC,KAAO,SAASxB,QAASlB,KAAKmC,YAAtC,mBAEA,2BAAO/B,MAEI,OAAXqB,EAAkB,iBAElBA,EAIAkB,UAAY,IAEZ,kBAAC,EAAD,CAAQzC,OAASF,KAAKqC,aAAclC,KAAK,YAAYC,MAAOmB,EAAWlB,WAAYA,KAIpF,kBAAC,EAAD,CAASc,KAAOA,S,GArGJX,aCOEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.bcaceeb1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Select extends Component {\r\n\r\n  render() {\r\n    return (\r\n\r\n     <select onChange={this.props.change} name={this.props.name} value={this.props.value}>\r\n\r\n      { this.props.currencies.map(currencies =>\r\n\r\n        <option\r\n\r\n          key= {currencies} \r\n\r\n          value = {currencies}\r\n\r\n          > {currencies}\r\n\r\n        </option>) \r\n\r\n      }\r\n\r\n     </select>\r\n\r\n    );\r\n  }\r\n}\r\nexport default Select;","import React, {Component} from 'react';\r\n\r\nclass DateBox extends Component {\r\n\r\nstate = {\r\n\r\n\tposition: {\r\n\t\tbottom: '-70px'\r\n\t}\r\n\r\n}\r\n\r\nhandleClick = () => {\r\n\tthis.setState( {position: {bottom: '0px'} } );\r\n}\r\n\r\nhandleSecondClick = () => {\r\n  this.setState( {position: {bottom: '-70px'} } );\r\n}\r\n\r\n\r\nrender(){\r\n\r\n return (\r\n  \r\n  <div id='date' style= {this.state.position}>\r\n\r\n  \t<div id='show' \r\n\r\n    onClick = {\r\n\r\n    this.state.position.bottom === '-70px' ? \r\n\r\n    this.handleClick : \r\n\r\n    this.handleSecondClick \r\n\r\n    }\r\n\r\n    > &#8643; &#8638; </div>\r\n\r\n    <p> Results from the date: {this.props.date} </p> \r\n    <p> Source: <a href='https://exchangeratesapi.io'> https://exchangeratesapi.io </a> </p>  \r\n\r\n  </div>\r\n\r\n )\r\n}\r\n\r\n}\r\n\r\nexport default DateBox;","import React, {Component} from 'react';\nimport Select from './components/select.jsx';\nimport DateBox from './components/dateBox.jsx';\n\n\nclass App extends Component {\n\n  state = {\n\n    currencies: [],\n\n    base: 'USD',\n\n    convertTo: 'EUR',\n\n    amount: '',\n\n    result: '',\n\n    date: '',\n\n    Api: () => {\n\n      fetch(`https://api.exchangeratesapi.io/latest?base=USD`)\n      .then(response => response.json())\n      .then(data =>{\n        this.setState(\n          {\n           date: data.date,\n           currencies: Object.keys(data.rates)\n          });\n      })\n    },\n\n  }\n\n  handleSwap = () => {\n    this.setState({ base: this.state.convertTo, convertTo: this.state.base \n      }, this.handleResult\n    )\n  }\n\n  handleSelect = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      }, this.handleResult \n    )\n  }\n\n  handleInput = e => {\n    this.setState({amount:e.target.value \n      }, this.handleResult \n    )\n  }\n\n  handleResult = e => {\n\n    let amount = this.state.amount;\n\n    if (amount === isNaN) {\n\n      return\n\n    } else {\n\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n      .then(response => response.json())\n      .then(data =>{\n\n        const result = data.rates[this.state.convertTo] * amount;\n        this.setState({result})\n      })\n    }\n  }\n\n  render() {\n\n    const { currencies, base, amount, convertTo, result, date } = this.state;\n    this.state.Api();\n\n    return (\n\n      <div id='box'>\n\n      <form>\n\n       <input onChange = {this.handleInput} type='number' value={amount}/>\n\n       <Select change = {this.handleSelect} name='base' value={base} currencies={currencies} />\n\n       <button type = 'button' onClick={this.handleSwap}> &#8593; &#8595; </button>\n\n       <input value = {\n\n       result === null ? 'calculating...' : \n\n       result \n\n       } \n\n       disabled = {true} />\n\n       <Select change= {this.handleSelect} name='convertTo' value={convertTo} currencies={currencies} />\n\n      </form>\n\n      <DateBox date= {date} />\n        \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}